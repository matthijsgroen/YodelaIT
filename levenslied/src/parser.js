module.exports = // @generated by Peggy 4.0.2.
  //
  // https://peggyjs.org/
  (function () {
    "use strict";

    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child;
      }
      C.prototype = parent.prototype;
      child.prototype = new C();
    }

    function peg$SyntaxError(message, expected, found, location) {
      var self = Error.call(this, message);
      // istanbul ignore next Check is a necessary evil to support older environments
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
      }
      self.expected = expected;
      self.found = found;
      self.location = location;
      self.name = "SyntaxError";
      return self;
    }

    peg$subclass(peg$SyntaxError, Error);

    function peg$padEnd(str, targetLength, padString) {
      padString = padString || " ";
      if (str.length > targetLength) {
        return str;
      }
      targetLength -= str.length;
      padString += padString.repeat(targetLength);
      return str + padString.slice(0, targetLength);
    }

    peg$SyntaxError.prototype.format = function (sources) {
      var str = "Error: " + this.message;
      if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
          if (sources[k].source === this.location.source) {
            src = sources[k].text.split(/\r\n|\n|\r/g);
            break;
          }
        }
        var s = this.location.start;
        var offset_s =
          this.location.source &&
          typeof this.location.source.offset === "function"
            ? this.location.source.offset(s)
            : s;
        var loc =
          this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
          var e = this.location.end;
          var filler = peg$padEnd("", offset_s.line.toString().length, " ");
          var line = src[s.line - 1];
          var last = s.line === e.line ? e.column : line.length + 1;
          var hatLen = last - s.column || 1;
          str +=
            "\n --> " +
            loc +
            "\n" +
            filler +
            " |\n" +
            offset_s.line +
            " | " +
            line +
            "\n" +
            filler +
            " | " +
            peg$padEnd("", s.column - 1, " ") +
            peg$padEnd("", hatLen, "^");
        } else {
          str += "\n at " + loc;
        }
      }
      return str;
    };

    peg$SyntaxError.buildMessage = function (expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },

        class: function (expectation) {
          var escapedParts = expectation.parts.map(function (part) {
            return Array.isArray(part)
              ? classEscape(part[0]) + "-" + classEscape(part[1])
              : classEscape(part);
          });

          return (
            "[" +
            (expectation.inverted ? "^" : "") +
            escapedParts.join("") +
            "]"
          );
        },

        any: function () {
          return "any character";
        },

        end: function () {
          return "end of input";
        },

        other: function (expectation) {
          return expectation.description;
        },
      };

      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }

      function literalEscape(s) {
        return s
          .replace(/\\/g, "\\\\")
          .replace(/"/g, '\\"')
          .replace(/\0/g, "\\0")
          .replace(/\t/g, "\\t")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/[\x00-\x0F]/g, function (ch) {
            return "\\x0" + hex(ch);
          })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return "\\x" + hex(ch);
          });
      }

      function classEscape(s) {
        return s
          .replace(/\\/g, "\\\\")
          .replace(/\]/g, "\\]")
          .replace(/\^/g, "\\^")
          .replace(/-/g, "\\-")
          .replace(/\0/g, "\\0")
          .replace(/\t/g, "\\t")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/[\x00-\x0F]/g, function (ch) {
            return "\\x0" + hex(ch);
          })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return "\\x" + hex(ch);
          });
      }

      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }

      function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;

        descriptions.sort();

        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }

        switch (descriptions.length) {
          case 1:
            return descriptions[0];

          case 2:
            return descriptions[0] + " or " + descriptions[1];

          default:
            return (
              descriptions.slice(0, -1).join(", ") +
              ", or " +
              descriptions[descriptions.length - 1]
            );
        }
      }

      function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : "end of input";
      }

      return (
        "Expected " +
        describeExpected(expected) +
        " but " +
        describeFound(found) +
        " found."
      );
    };

    function peg$parse(input, options) {
      options = options !== undefined ? options : {};

      var peg$FAILED = {};
      var peg$source = options.grammarSource;

      var peg$startRuleFunctions = { start: peg$parsestart };
      var peg$startRuleFunction = peg$parsestart;

      var peg$c0 = "\n";
      var peg$c1 = "stop";
      var peg$c2 = "in";
      var peg$c3 = "laat";
      var peg$c4 = "wezen";
      var peg$c5 = "bouw";
      var peg$c6 = "op";
      var peg$c7 = ",";
      var peg$c8 = "haal";
      var peg$c9 = "neer";
      var peg$c10 = "versterk";
      var peg$c11 = "demp";
      var peg$c12 = "als";
      var peg$c13 = "totdat";
      var peg$c14 = "zolang";
      var peg$c15 = "herbeleef";
      var peg$c16 = "continue";
      var peg$c17 = "doorbreek de cirkel";
      var peg$c18 = "break";
      var peg$c19 = "zonder";
      var peg$c20 = "met";
      var peg$c21 = "keer";
      var peg$c22 = "van";
      var peg$c23 = "verdeelt over";
      var peg$c24 = "boven";
      var peg$c25 = "en";
      var peg$c26 = "of";
      var peg$c27 = "noch";
      var peg$c28 = "niet";
      var peg$c29 = "ontvangt";
      var peg$c30 = "neemt";
      var peg$c31 = "wil";
      var peg$c32 = "geef";
      var peg$c33 = "terug";
      var peg$c34 = "hoger";
      var peg$c35 = "groter";
      var peg$c36 = "sterker";
      var peg$c37 = "beter";
      var peg$c38 = "dan";
      var peg$c39 = "lager";
      var peg$c40 = "minder";
      var peg$c41 = "kleiner";
      var peg$c42 = "zwakker";
      var peg$c43 = "slechter";
      var peg$c44 = "zo";
      var peg$c45 = "hoog";
      var peg$c46 = "groot";
      var peg$c47 = "sterk";
      var peg$c48 = "goed";
      var peg$c49 = "laag";
      var peg$c50 = "klein";
      var peg$c51 = "zwak";
      var peg$c52 = "slecht";
      var peg$c53 = "het";
      var peg$c54 = "hij";
      var peg$c55 = "zij";
      var peg$c56 = "hem";
      var peg$c57 = "haar";
      var peg$c58 = "hun";
      var peg$c59 = "zegt";
      var peg$c60 = "zeggen";
      var peg$c61 = "zeiden";
      var peg$c62 = "juist";
      var peg$c63 = "ja";
      var peg$c64 = "oke";
      var peg$c65 = "waarheid";
      var peg$c66 = "true";
      var peg$c67 = "fout";
      var peg$c68 = "nee";
      var peg$c69 = "leugens";
      var peg$c70 = "false";
      var peg$c71 = "leeg";
      var peg$c72 = "stil";
      var peg$c73 = "stilte";
      var peg$c74 = ".";
      var peg$c75 = '"';
      var peg$c76 = "(";
      var peg$c77 = ")";
      var peg$c78 = "null";
      var peg$c79 = "niets";
      var peg$c80 = "niemand";
      var peg$c81 = "nergens";
      var peg$c82 = "weg";
      var peg$c83 = "mysterieus";
      var peg$c84 = "zeg";
      var peg$c85 = "fluister";
      var peg$c86 = "roep";
      var peg$c87 = "schreeuw";
      var peg$c88 = "zing";
      var peg$c89 = "bestaat";
      var peg$c90 = "is";
      var peg$c91 = "de";
      var peg$c92 = "een";
      var peg$c93 = "mijn";
      var peg$c94 = "je";
      var peg$c95 = "jouw";
      var peg$c96 = "onze";
      var peg$c97 = "uit";
      var peg$c98 = "zijn";
      var peg$c99 = "waren";
      var peg$c100 = "was";
      var peg$c101 = "&";
      var peg$c102 = "'n";

      var peg$r0 = /^[A-Z]/;
      var peg$r1 = /^[^\n]/;
      var peg$r2 = /^[a-z\-.]/i;
      var peg$r3 = /^[^ \n,]/;
      var peg$r4 = /^[0-9]/;
      var peg$r5 = /^[^"]/;
      var peg$r6 = /^[^)]/;
      var peg$r7 = /^[ ,!?:;.]/;

      var peg$e0 = peg$otherExpectation("enter");
      var peg$e1 = peg$literalExpectation("\n", false);
      var peg$e2 = peg$otherExpectation("einde scope");
      var peg$e3 = peg$literalExpectation("Stop", true);
      var peg$e4 = peg$literalExpectation("in", true);
      var peg$e5 = peg$literalExpectation("Laat", true);
      var peg$e6 = peg$literalExpectation("wezen", true);
      var peg$e7 = peg$literalExpectation("Bouw", true);
      var peg$e8 = peg$literalExpectation("op", true);
      var peg$e9 = peg$literalExpectation(",", false);
      var peg$e10 = peg$literalExpectation("Haal", true);
      var peg$e11 = peg$literalExpectation("neer", true);
      var peg$e12 = peg$literalExpectation("Versterk", true);
      var peg$e13 = peg$literalExpectation("Demp", true);
      var peg$e14 = peg$otherExpectation("conditie");
      var peg$e15 = peg$literalExpectation("Als", true);
      var peg$e16 = peg$literalExpectation("Totdat", true);
      var peg$e17 = peg$literalExpectation("Zolang", true);
      var peg$e18 = peg$literalExpectation("Herbeleef", true);
      var peg$e19 = peg$literalExpectation("continue", true);
      var peg$e20 = peg$literalExpectation("Doorbreek de cirkel", true);
      var peg$e21 = peg$literalExpectation("break", true);
      var peg$e22 = peg$literalExpectation("zonder", true);
      var peg$e23 = peg$literalExpectation("met", true);
      var peg$e24 = peg$literalExpectation("keer", true);
      var peg$e25 = peg$literalExpectation("van", true);
      var peg$e26 = peg$literalExpectation("verdeelt over", true);
      var peg$e27 = peg$literalExpectation("boven", true);
      var peg$e28 = peg$literalExpectation("en", true);
      var peg$e29 = peg$literalExpectation("of", true);
      var peg$e30 = peg$literalExpectation("noch", true);
      var peg$e31 = peg$literalExpectation("niet", true);
      var peg$e32 = peg$literalExpectation("ontvangt", false);
      var peg$e33 = peg$literalExpectation("neemt", false);
      var peg$e34 = peg$literalExpectation("wil", false);
      var peg$e35 = peg$literalExpectation("Geef", true);
      var peg$e36 = peg$literalExpectation("terug", true);
      var peg$e37 = peg$literalExpectation("niet", false);
      var peg$e38 = peg$literalExpectation("hoger", false);
      var peg$e39 = peg$literalExpectation("groter", false);
      var peg$e40 = peg$literalExpectation("sterker", false);
      var peg$e41 = peg$literalExpectation("beter", false);
      var peg$e42 = peg$literalExpectation("dan", false);
      var peg$e43 = peg$literalExpectation("lager", false);
      var peg$e44 = peg$literalExpectation("minder", false);
      var peg$e45 = peg$literalExpectation("kleiner", false);
      var peg$e46 = peg$literalExpectation("zwakker", false);
      var peg$e47 = peg$literalExpectation("slechter", false);
      var peg$e48 = peg$literalExpectation("zo", false);
      var peg$e49 = peg$literalExpectation("hoog", false);
      var peg$e50 = peg$literalExpectation("groot", false);
      var peg$e51 = peg$literalExpectation("sterk", false);
      var peg$e52 = peg$literalExpectation("goed", false);
      var peg$e53 = peg$literalExpectation("als", false);
      var peg$e54 = peg$literalExpectation("laag", false);
      var peg$e55 = peg$literalExpectation("klein", false);
      var peg$e56 = peg$literalExpectation("zwak", false);
      var peg$e57 = peg$literalExpectation("slecht", false);
      var peg$e58 = peg$otherExpectation("referentie");
      var peg$e59 = peg$literalExpectation("het", false);
      var peg$e60 = peg$literalExpectation("hij", false);
      var peg$e61 = peg$literalExpectation("zij", false);
      var peg$e62 = peg$literalExpectation("hem", false);
      var peg$e63 = peg$literalExpectation("haar", false);
      var peg$e64 = peg$literalExpectation("hun", false);
      var peg$e65 = peg$otherExpectation("variabele");
      var peg$e66 = peg$classExpectation([["A", "Z"]], false, false);
      var peg$e67 = peg$literalExpectation("zegt", false);
      var peg$e68 = peg$literalExpectation("zeggen", false);
      var peg$e69 = peg$literalExpectation("zeiden", false);
      var peg$e70 = peg$classExpectation(["\n"], true, false);
      var peg$e71 = peg$otherExpectation("woord");
      var peg$e72 = peg$classExpectation([["a", "z"], "-", "."], false, true);
      var peg$e73 = peg$classExpectation([" ", "\n", ","], true, false);
      var peg$e74 = peg$otherExpectation("waarheid");
      var peg$e75 = peg$literalExpectation("juist", false);
      var peg$e76 = peg$literalExpectation("ja", false);
      var peg$e77 = peg$literalExpectation("oke", false);
      var peg$e78 = peg$literalExpectation("waarheid", false);
      var peg$e79 = peg$literalExpectation("true", false);
      var peg$e80 = peg$otherExpectation("leugens");
      var peg$e81 = peg$literalExpectation("fout", false);
      var peg$e82 = peg$literalExpectation("nee", false);
      var peg$e83 = peg$literalExpectation("leugens", false);
      var peg$e84 = peg$literalExpectation("false", false);
      var peg$e85 = peg$otherExpectation("niets");
      var peg$e86 = peg$otherExpectation("mysterieus");
      var peg$e87 = peg$otherExpectation("stilte");
      var peg$e88 = peg$literalExpectation("leeg", false);
      var peg$e89 = peg$literalExpectation("stil", false);
      var peg$e90 = peg$literalExpectation("stilte", false);
      var peg$e91 = peg$otherExpectation("getal");
      var peg$e92 = peg$classExpectation([["0", "9"]], false, false);
      var peg$e93 = peg$literalExpectation(".", false);
      var peg$e94 = peg$otherExpectation("string");
      var peg$e95 = peg$literalExpectation('"', false);
      var peg$e96 = peg$classExpectation(['"'], true, false);
      var peg$e97 = peg$literalExpectation("(", false);
      var peg$e98 = peg$classExpectation([")"], true, false);
      var peg$e99 = peg$literalExpectation(")", false);
      var peg$e100 = peg$literalExpectation("null", true);
      var peg$e101 = peg$literalExpectation("niets", true);
      var peg$e102 = peg$literalExpectation("niemand", true);
      var peg$e103 = peg$literalExpectation("nergens", true);
      var peg$e104 = peg$literalExpectation("weg", true);
      var peg$e105 = peg$literalExpectation("mysterieus", true);
      var peg$e106 = peg$literalExpectation("Zeg", true);
      var peg$e107 = peg$literalExpectation("Fluister", true);
      var peg$e108 = peg$literalExpectation("Roep", true);
      var peg$e109 = peg$literalExpectation("Schreeuw", true);
      var peg$e110 = peg$literalExpectation("Zing", true);
      var peg$e111 = peg$literalExpectation("bestaat", false);
      var peg$e112 = peg$literalExpectation("als", true);
      var peg$e113 = peg$literalExpectation("is", true);
      var peg$e114 = peg$literalExpectation("ontvangt", true);
      var peg$e115 = peg$literalExpectation("stop", true);
      var peg$e116 = peg$literalExpectation("haal", true);
      var peg$e117 = peg$literalExpectation("bouw", true);
      var peg$e118 = peg$literalExpectation("de", true);
      var peg$e119 = peg$literalExpectation("een", true);
      var peg$e120 = peg$literalExpectation("mijn", true);
      var peg$e121 = peg$literalExpectation("je", true);
      var peg$e122 = peg$literalExpectation("jouw", true);
      var peg$e123 = peg$literalExpectation("onze", true);
      var peg$e124 = peg$literalExpectation("bestaat", true);
      var peg$e125 = peg$literalExpectation("uit", true);
      var peg$e126 = peg$literalExpectation("zijn", true);
      var peg$e127 = peg$literalExpectation("waren", true);
      var peg$e128 = peg$literalExpectation("was", true);
      var peg$e129 = peg$literalExpectation("&", false);
      var peg$e130 = peg$literalExpectation("'n", false);
      var peg$e131 = peg$literalExpectation("en", false);
      var peg$e132 = peg$otherExpectation("spaties");
      var peg$e133 = peg$classExpectation(
        [" ", ",", "!", "?", ":", ";", "."],
        false,
        false
      );
      var peg$e134 = peg$otherExpectation("minstends 1 spatie");
      var peg$e135 = peg$anyExpectation();

      var peg$f0 = function (statements) {
        return statements;
      };
      var peg$f1 = function (variable, value) {
        lastVarParsed = variable;
        return { type: "variableDeclaration", variable, value };
      };
      var peg$f2 = function (value, variable) {
        lastVarParsed = variable;
        return { type: "variableAssignment", variable, value };
      };
      var peg$f3 = function (variable, value) {
        lastVarParsed = variable;
        return { type: "variableAssignment", variable, value };
      };
      var peg$f4 = function (variable, amount) {
        return { type: "incrementVariable", variable, amount: amount.length };
      };
      var peg$f5 = function (variable, amount) {
        return { type: "decrementVariable", variable, amount: amount.length };
      };
      var peg$f6 = function (variable) {
        return { type: "roundUp", variable };
      };
      var peg$f7 = function (variable) {
        return { type: "roundDown", variable };
      };
      var peg$f8 = function (output) {
        return { type: "output", output };
      };
      var peg$f9 = function (expression, scope) {
        return { type: "if", condition: expression, block: scope };
      };
      var peg$f10 = function (expression, scope) {
        return {
          type: "loop",
          kind: "until",
          condition: expression,
          block: scope,
        };
      };
      var peg$f11 = function (expression, scope) {
        return {
          type: "loop",
          kind: "while",
          condition: expression,
          block: scope,
        };
      };
      var peg$f12 = function () {
        return { type: "loopControl", control: "continue" };
      };
      var peg$f13 = function () {
        return { type: "loopControl", control: "break" };
      };
      var peg$f14 = function (a, b) {
        return { type: "calculation", op: "subtraction", a, b };
      };
      var peg$f15 = function (a, b) {
        return { type: "calculation", op: "addition", a, b };
      };
      var peg$f16 = function (a, b) {
        return { type: "calculation", op: "times", a, b };
      };
      var peg$f17 = function (a, b) {
        return { type: "calculation", op: "division", a, b };
      };
      var peg$f18 = function (a, b) {
        return { type: "booleanLogic", op: "and", a, b };
      };
      var peg$f19 = function (a, b) {
        return { type: "booleanLogic", op: "or", a, b };
      };
      var peg$f20 = function (a, b) {
        return { type: "booleanLogic", op: "nor", a, b };
      };
      var peg$f21 = function (a) {
        return { type: "booleanLogic", op: "not", a };
      };
      var peg$f22 = function (name, parameters) {
        return { type: "functionCall", name, parameters };
      };
      var peg$f23 = function (name, parameters, scope) {
        return { type: "functionDeclaration", name, parameters, scope };
      };
      var peg$f24 = function (value) {
        return { type: "return", value };
      };
      var peg$f25 = function (a, b) {
        return { type: "comparison", op: "not-equal", a, b };
      };
      var peg$f26 = function (a, b) {
        return { type: "comparison", op: "not-equal", a, b };
      };
      var peg$f27 = function (a, b) {
        return { type: "comparison", op: "greater", a, b };
      };
      var peg$f28 = function (a, b) {
        return { type: "comparison", op: "lesser", a, b };
      };
      var peg$f29 = function (a, b) {
        return { type: "comparison", op: "greater-equal", a, b };
      };
      var peg$f30 = function (a, b) {
        return { type: "comparison", op: "lesser-equal", a, b };
      };
      var peg$f31 = function (a, b) {
        return { type: "comparison", op: "equal", a, b };
      };
      var peg$f32 = function (a, b) {
        return { type: "comparison", op: "equal", a, b };
      };
      var peg$f33 = function () {
        return lastVarParsed;
      };
      var peg$f34 = function (a) {
        return a;
      };
      var peg$f35 = function (name) {
        return { type: "SimpleVariable", name };
      };
      var peg$f36 = function (a, b) {
        return [a, b].join("");
      };
      var peg$f37 = function (name) {
        return { type: "ProperVariable", name: name.join(" ") };
      };
      var peg$f38 = function (prefix, name) {
        return { type: "CommonVariable", name: [prefix, name[1]].join(" ") };
      };
      var peg$f39 = function (variable, value) {
        lastVarParsed = variable;
        return {
          type: "variableDeclaration",
          variable,
          value: { type: "string", value },
        };
      };
      var peg$f40 = function (value) {
        return {
          type: "number",
          value: parseFloat(
            value.reduce(
              (r, e) =>
                r +
                (e.endsWith(".")
                  ? "" + (e.length - (1 % 10)) + "."
                  : e.length % 10),
              ""
            )
          ),
        };
      };
      var peg$f41 = function (c) {
        return c;
      };
      var peg$f42 = function () {
        return "";
      };
      var peg$f43 = function (v) {
        return v.join("");
      };
      var peg$f44 = function () {
        return { type: "boolean", value: true };
      };
      var peg$f45 = function () {
        return { type: "boolean", value: false };
      };
      var peg$f46 = function () {
        return { type: "null", value: null };
      };
      var peg$f47 = function () {
        return { type: "undefined", value: undefined };
      };
      var peg$f48 = function () {
        return { type: "string", value: "" };
      };
      var peg$f49 = function (value) {
        return { type: "number", value: parseFloat(value) };
      };
      var peg$f50 = function (value) {
        return { type: "string", value };
      };
      var peg$f51 = function (content) {
        return { type: "comment", content };
      };
      var peg$currPos = options.peg$currPos | 0;
      var peg$savedPos = peg$currPos;
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      var peg$maxFailPos = peg$currPos;
      var peg$maxFailExpected = options.peg$maxFailExpected || [];
      var peg$silentFails = options.peg$silentFails | 0;

      var peg$result;

      if (options.startRule) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(
            "Can't start parsing from rule \"" + options.startRule + '".'
          );
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }

      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }

      function offset() {
        return peg$savedPos;
      }

      function range() {
        return {
          source: peg$source,
          start: peg$savedPos,
          end: peg$currPos,
        };
      }

      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }

      function expected(description, location) {
        location =
          location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location
        );
      }

      function error(message, location) {
        location =
          location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildSimpleError(message, location);
      }

      function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
      }

      function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
          type: "class",
          parts: parts,
          inverted: inverted,
          ignoreCase: ignoreCase,
        };
      }

      function peg$anyExpectation() {
        return { type: "any" };
      }

      function peg$endExpectation() {
        return { type: "end" };
      }

      function peg$otherExpectation(description) {
        return { type: "other", description: description };
      }

      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;

        if (details) {
          return details;
        } else {
          if (pos >= peg$posDetailsCache.length) {
            p = peg$posDetailsCache.length - 1;
          } else {
            p = pos;
            while (!peg$posDetailsCache[--p]) {}
          }

          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column,
          };

          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }

            p++;
          }

          peg$posDetailsCache[pos] = details;

          return details;
        }
      }

      function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);

        var res = {
          source: peg$source,
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column,
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column,
          },
        };
        if (offset && peg$source && typeof peg$source.offset === "function") {
          res.start = peg$source.offset(res.start);
          res.end = peg$source.offset(res.end);
        }
        return res;
      }

      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
          return;
        }

        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
      }

      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
      }

      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location
        );
      }

      function peg$parsestart() {
        var s0;

        s0 = peg$parseScope();

        return s0;
      }

      function peg$parseScope() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseStatement();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          s4 = peg$parse__();
          s5 = peg$parseEnter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s3 = peg$parseStatement();
            if (s3 === peg$FAILED) {
              peg$currPos = s2;
              s2 = peg$FAILED;
            } else {
              s2 = s3;
            }
          } else {
            s2 = s3;
          }
        }
        s2 = peg$parse__();
        s3 = peg$parseEndOfScope();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f0(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseEnter() {
        var s0, s1;

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c0;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e1);
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }

        return s0;
      }

      function peg$parseEndOfScope() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$parseEnter();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEOF();
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e2);
          }
        }

        return s0;
      }

      function peg$parseStatement() {
        var s0;

        s0 = peg$parseAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIncrement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDecrement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRoundUp();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRoundDown();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseOutput();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseIfStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseLoop();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFunctionCall();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseLoopControl();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFunctionDef();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseReturnValue();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseComment();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseAssignment() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIs();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseValue();
              if (s4 === peg$FAILED) {
                s4 = peg$parsePoeticNumberLiteral();
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f1(s1, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c1) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e3);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseExpressionValue();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = input.substr(peg$currPos, 2);
                  if (s5.toLowerCase() === peg$c2) {
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e4);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseVariable();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f2(s3, s7);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c3) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseVariable();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseExpressionValue();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        s7 = input.substr(peg$currPos, 5);
                        if (s7.toLowerCase() === peg$c4) {
                          peg$currPos += 5;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e6);
                          }
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f3(s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsePoeticStringLiteral();
            }
          }
        }

        return s0;
      }

      function peg$parseIncrement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c5) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e7);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = input.substr(peg$currPos, 2);
                if (s7.toLowerCase() === peg$c6) {
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e8);
                  }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c7;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s8 = input.substr(peg$currPos, 2);
                    if (s8.toLowerCase() === peg$c6) {
                      peg$currPos += 2;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e8);
                      }
                    }
                    if (s8 === peg$FAILED) {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    } else {
                      s7 = s8;
                    }
                  } else {
                    s7 = s8;
                  }
                }
                if (s6.length < 1) {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                } else {
                  s5 = s6;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f4(s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseDecrement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c8) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e10);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = input.substr(peg$currPos, 4);
                if (s7.toLowerCase() === peg$c9) {
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                  }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c7;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s8 = input.substr(peg$currPos, 4);
                    if (s8.toLowerCase() === peg$c9) {
                      peg$currPos += 4;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e11);
                      }
                    }
                    if (s8 === peg$FAILED) {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    } else {
                      s7 = s8;
                    }
                  } else {
                    s7 = s8;
                  }
                }
                if (s6.length < 1) {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                } else {
                  s5 = s6;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f5(s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseRoundUp() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 8);
        if (s1.toLowerCase() === peg$c10) {
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e12);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f6(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseRoundDown() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c11) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f7(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseOutput() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseOutputTerm();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpressionValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseIfStatement() {
        var s0, s1, s2, s3, s4, s5;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 3);
        if (s1.toLowerCase() === peg$c12) {
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEnter();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseScope();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f9(s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e14);
          }
        }

        return s0;
      }

      function peg$parseLoop() {
        var s0, s1, s2, s3, s4, s5, s6;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 6);
        if (s1.toLowerCase() === peg$c13) {
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              s5 = peg$parseEnter();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseScope();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f10(s3, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 6);
          if (s1.toLowerCase() === peg$c14) {
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e17);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseEnter();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseScope();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f11(s3, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }

        return s0;
      }

      function peg$parseLoopControl() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 9);
        if (s1.toLowerCase() === peg$c15) {
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e18);
          }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 8);
          if (s1.toLowerCase() === peg$c16) {
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e19);
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f12();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 19);
          if (s1.toLowerCase() === peg$c17) {
            peg$currPos += 19;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e20);
            }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 5);
            if (s1.toLowerCase() === peg$c18) {
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f13();
          }
          s0 = s1;
        }

        return s0;
      }

      function peg$parseExpression() {
        var s0;

        s0 = peg$parseLogicalOperator();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCompareValue();
        }

        return s0;
      }

      function peg$parseCompareValue() {
        var s0;

        s0 = peg$parseComparison();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExpressionValue();
        }

        return s0;
      }

      function peg$parseExpressionValue() {
        var s0;

        s0 = peg$parseFunctionCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAdditiveMathExpression();
        }

        return s0;
      }

      function peg$parsePrimary() {
        var s0;

        s0 = peg$parseValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVariable();
        }

        return s0;
      }

      function peg$parseAdditiveMathExpression() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseMultiplicativeMathExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = input.substr(peg$currPos, 6);
            if (s3.toLowerCase() === peg$c19) {
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseAdditiveMathExpression();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f14(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMultiplicativeMathExpression();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = input.substr(peg$currPos, 3);
              if (s3.toLowerCase() === peg$c20) {
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e23);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseAdditiveMathExpression();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f15(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseMultiplicativeMathExpression();
          }
        }

        return s0;
      }

      function peg$parseMultiplicativeMathExpression() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parsePrimary();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = input.substr(peg$currPos, 4);
            if (s3.toLowerCase() === peg$c21) {
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s3 === peg$FAILED) {
              s3 = input.substr(peg$currPos, 3);
              if (s3.toLowerCase() === peg$c22) {
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e25);
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseMultiplicativeMathExpression();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f16(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePrimary();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = input.substr(peg$currPos, 13);
              if (s3.toLowerCase() === peg$c23) {
                peg$currPos += 13;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e26);
                }
              }
              if (s3 === peg$FAILED) {
                s3 = input.substr(peg$currPos, 5);
                if (s3.toLowerCase() === peg$c24) {
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseMultiplicativeMathExpression();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f17(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsePrimary();
          }
        }

        return s0;
      }

      function peg$parseLogicalOperator() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseCompareValue();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = input.substr(peg$currPos, 2);
            if (s3.toLowerCase() === peg$c25) {
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e28);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCompareValue();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f18(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCompareValue();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = input.substr(peg$currPos, 2);
              if (s3.toLowerCase() === peg$c26) {
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e29);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCompareValue();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f19(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCompareValue();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = input.substr(peg$currPos, 4);
                if (s3.toLowerCase() === peg$c27) {
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCompareValue();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f20(s1, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c28) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e31);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseExpression();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f21(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }

        return s0;
      }

      function peg$parseFunctionCall() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c29) {
              s3 = peg$c29;
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e32);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parseExpressionValue();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseParamSeparator();
                  if (s8 !== peg$FAILED) {
                    s8 = peg$parseExpressionValue();
                    if (s8 === peg$FAILED) {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    } else {
                      s7 = s8;
                    }
                  } else {
                    s7 = s8;
                  }
                }
                if (s6.length < 1) {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                } else {
                  s5 = s6;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f22(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseFunctionDef() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c30) {
              s3 = peg$c30;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c31) {
                s3 = peg$c31;
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e34);
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parseVariable();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseParamSeparator();
                  if (s8 !== peg$FAILED) {
                    s8 = peg$parseVariable();
                    if (s8 === peg$FAILED) {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    } else {
                      s7 = s8;
                    }
                  } else {
                    s7 = s8;
                  }
                }
                if (s6.length < 1) {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                } else {
                  s5 = s6;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseEnter();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseScope();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f23(s1, s5, s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseReturnValue() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c32) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e35);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = input.substr(peg$currPos, 5);
                if (s5.toLowerCase() === peg$c33) {
                  peg$currPos += 5;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e36);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f24(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseComparison() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        s0 = peg$currPos;
        s1 = peg$parseExpressionValue();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c28) {
              s3 = peg$c28;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e37);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseExpressionValue();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseIs();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f25(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseExpressionValue();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIs();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c28) {
                  s4 = peg$c28;
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e37);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseExpressionValue();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f26(s1, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseExpressionValue();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c34) {
                  s3 = peg$c34;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e38);
                  }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c35) {
                    s3 = peg$c35;
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e39);
                    }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c36) {
                      s3 = peg$c36;
                      peg$currPos += 7;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e40);
                      }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c37) {
                        s3 = peg$c37;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e41);
                        }
                      }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseIs();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c38) {
                        s6 = peg$c38;
                        peg$currPos += 3;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e42);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse_();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseExpressionValue();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f27(s1, s8);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseExpressionValue();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c39) {
                    s3 = peg$c39;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e43);
                    }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c40) {
                      s3 = peg$c40;
                      peg$currPos += 6;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e44);
                      }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c41) {
                        s3 = peg$c41;
                        peg$currPos += 7;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e45);
                        }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c42) {
                          s3 = peg$c42;
                          peg$currPos += 7;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e46);
                          }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c43) {
                            s3 = peg$c43;
                            peg$currPos += 8;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e47);
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseIs();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c38) {
                            s7 = peg$c38;
                            peg$currPos += 3;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e42);
                            }
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parse_();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseExpressionValue();
                              if (s9 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f28(s1, s9);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseExpressionValue();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c44) {
                      s3 = peg$c44;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e48);
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c45) {
                          s5 = peg$c45;
                          peg$currPos += 4;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e49);
                          }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c46) {
                            s5 = peg$c46;
                            peg$currPos += 5;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e50);
                            }
                          }
                          if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c47) {
                              s5 = peg$c47;
                              peg$currPos += 5;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e51);
                              }
                            }
                            if (s5 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c48) {
                                s5 = peg$c48;
                                peg$currPos += 4;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e52);
                                }
                              }
                            }
                          }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseIs();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (s7 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c12) {
                                s8 = peg$c12;
                                peg$currPos += 3;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e53);
                                }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse_();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parseExpressionValue();
                                  if (s10 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f29(s1, s10);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseExpressionValue();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c44) {
                        s3 = peg$c44;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e48);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c49) {
                            s5 = peg$c49;
                            peg$currPos += 4;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e54);
                            }
                          }
                          if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c50) {
                              s5 = peg$c50;
                              peg$currPos += 5;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e55);
                              }
                            }
                            if (s5 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c51) {
                                s5 = peg$c51;
                                peg$currPos += 4;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e56);
                                }
                              }
                              if (s5 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c52) {
                                  s5 = peg$c52;
                                  peg$currPos += 6;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e57);
                                  }
                                }
                              }
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseIs();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parse_();
                              if (s7 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c12) {
                                  s8 = peg$c12;
                                  peg$currPos += 3;
                                } else {
                                  s8 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e53);
                                  }
                                }
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parse_();
                                  if (s9 !== peg$FAILED) {
                                    s10 = peg$parseExpressionValue();
                                    if (s10 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f30(s1, s10);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseExpressionValue();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseIs();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseExpressionValue();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f31(s1, s4);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseExpressionValue();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseExpressionValue();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseIs();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f32(s1, s3);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseVariable() {
        var s0;

        s0 = peg$parseVariableReference();
        if (s0 === peg$FAILED) {
          s0 = peg$parseProperVariable();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSimpleVariable();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCommonVariable();
            }
          }
        }

        return s0;
      }

      function peg$parseVariableReference() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c53) {
          s1 = peg$c53;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e59);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c54) {
            s1 = peg$c54;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e60);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c55) {
              s1 = peg$c55;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e61);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c56) {
                s1 = peg$c56;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e62);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c57) {
                  s1 = peg$c57;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e63);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c58) {
                    s1 = peg$c58;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e64);
                    }
                  }
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f33();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e58);
          }
        }

        return s0;
      }

      function peg$parseSimpleVariable() {
        var s0, s1, s2, s3, s4;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseReservedWord();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWord();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f34(s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f35(s1);
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e65);
          }
        }

        return s0;
      }

      function peg$parseProperVariable() {
        var s0, s1, s2, s3, s4, s5, s6;

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$currPos;
        s4 = input.charAt(peg$currPos);
        if (peg$r0.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e66);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWord();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f36(s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = input.charAt(peg$currPos);
            if (peg$r0.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e66);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWord();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s4 = peg$f36(s5, s6);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              peg$currPos = s3;
              s3 = peg$FAILED;
            } else {
              s3 = s4;
            }
          } else {
            s3 = s4;
          }
        }
        if (s2.length < 2) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f37(s1);
        }
        s0 = s1;

        return s0;
      }

      function peg$parseCommonVariable() {
        var s0, s1, s2, s3, s4, s5;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseCommonVarPrefix();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseReservedWord();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = undefined;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWord();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f38(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e65);
          }
        }

        return s0;
      }

      function peg$parseValue() {
        var s0;

        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePoeticConstant();
          if (s0 === peg$FAILED) {
            s0 = peg$parseString();
          }
        }

        return s0;
      }

      function peg$parsePoeticConstant() {
        var s0;

        s0 = peg$parseEmptyString();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNull();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMysterious();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBooleanTrue();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBooleanFalse();
              }
            }
          }
        }

        return s0;
      }

      function peg$parsePoeticStringLiteral() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c59) {
              s3 = peg$c59;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e67);
              }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c60) {
                s3 = peg$c60;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e68);
                }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c61) {
                  s3 = peg$c61;
                  peg$currPos += 6;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e69);
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = input.charAt(peg$currPos);
                if (peg$r1.test(s7)) {
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e70);
                  }
                }
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = input.charAt(peg$currPos);
                    if (peg$r1.test(s7)) {
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e70);
                      }
                    }
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s5 = input.substring(s5, peg$currPos);
                } else {
                  s5 = s6;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f39(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parsePoeticNumberLiteral() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parseWord();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s4 = peg$parseWord();
            if (s4 === peg$FAILED) {
              peg$currPos = s3;
              s3 = peg$FAILED;
            } else {
              s3 = s4;
            }
          } else {
            s3 = s4;
          }
        }
        if (s2.length < 1) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f40(s1);
        }
        s0 = s1;

        return s0;
      }

      function peg$parseWord() {
        var s0, s1, s2, s3;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e72);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f41(s3);
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e73);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f42();
          }
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = input.charAt(peg$currPos);
            if (peg$r2.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e72);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$f41(s3);
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = input.charAt(peg$currPos);
              if (peg$r3.test(s3)) {
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e73);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f42();
              }
              s2 = s3;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f43(s1);
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e71);
          }
        }

        return s0;
      }

      function peg$parseBooleanTrue() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c62) {
          s1 = peg$c62;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e75);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c63) {
            s1 = peg$c63;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e76);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c64) {
              s1 = peg$c64;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e77);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c65) {
                s1 = peg$c65;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e78);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c66) {
                  s1 = peg$c66;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e79);
                  }
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f44();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e74);
          }
        }

        return s0;
      }

      function peg$parseBooleanFalse() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c67) {
          s1 = peg$c67;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e81);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c68) {
            s1 = peg$c68;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e82);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c69) {
              s1 = peg$c69;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e83);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c70) {
                s1 = peg$c70;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e84);
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f45();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e80);
          }
        }

        return s0;
      }

      function peg$parseNull() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseNullTerm();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f46();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e85);
          }
        }

        return s0;
      }

      function peg$parseMysterious() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseMysteriousTerm();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f47();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e86);
          }
        }

        return s0;
      }

      function peg$parseEmptyString() {
        var s0, s1;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c71) {
          s1 = peg$c71;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e88);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c72) {
            s1 = peg$c72;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e89);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c73) {
              s1 = peg$c73;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e90);
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f48();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e87);
          }
        }

        return s0;
      }

      function peg$parseNumber() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e92);
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r4.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e92);
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c74;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e93);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = input.charAt(peg$currPos);
            if (peg$r4.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e92);
              }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = input.charAt(peg$currPos);
                if (peg$r4.test(s7)) {
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e92);
                  }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f49(s1);
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e91);
          }
        }

        return s0;
      }

      function peg$parseString() {
        var s0, s1, s2, s3, s4;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c75;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e95);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (peg$r5.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e96);
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = input.charAt(peg$currPos);
              if (peg$r5.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e96);
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c75;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e95);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f50(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e94);
          }
        }

        return s0;
      }

      function peg$parseComment() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c76;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e97);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (peg$r6.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e98);
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = input.charAt(peg$currPos);
              if (peg$r6.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e98);
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c77;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e99);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f51(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      function peg$parseNullTerm() {
        var s0;

        s0 = input.substr(peg$currPos, 4);
        if (s0.toLowerCase() === peg$c78) {
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e100);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 5);
          if (s0.toLowerCase() === peg$c79) {
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e101);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 7);
            if (s0.toLowerCase() === peg$c80) {
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e102);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 7);
              if (s0.toLowerCase() === peg$c81) {
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e103);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 3);
                if (s0.toLowerCase() === peg$c82) {
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e104);
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseMysteriousTerm() {
        var s0;

        s0 = input.substr(peg$currPos, 10);
        if (s0.toLowerCase() === peg$c83) {
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e105);
          }
        }

        return s0;
      }

      function peg$parseOutputTerm() {
        var s0;

        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c84) {
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e106);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 8);
          if (s0.toLowerCase() === peg$c85) {
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e107);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 4);
            if (s0.toLowerCase() === peg$c86) {
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e108);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 8);
              if (s0.toLowerCase() === peg$c87) {
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e109);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 4);
                if (s0.toLowerCase() === peg$c88) {
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e110);
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseReservedWord() {
        var s0;

        if (input.substr(peg$currPos, 7) === peg$c89) {
          s0 = peg$c89;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e111);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 3);
          if (s0.toLowerCase() === peg$c12) {
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e112);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 2);
            if (s0.toLowerCase() === peg$c25) {
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e28);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 2);
              if (s0.toLowerCase() === peg$c90) {
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e113);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 8);
                if (s0.toLowerCase() === peg$c29) {
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e114);
                  }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 4);
                  if (s0.toLowerCase() === peg$c1) {
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e115);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = input.substr(peg$currPos, 4);
                    if (s0.toLowerCase() === peg$c8) {
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e116);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = input.substr(peg$currPos, 4);
                      if (s0.toLowerCase() === peg$c5) {
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e117);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s0 = peg$c76;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e97);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseOutputTerm();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseNullTerm();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCommonVarPrefix();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseCommonVarPrefix() {
        var s0;

        s0 = input.substr(peg$currPos, 2);
        if (s0.toLowerCase() === peg$c91) {
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e118);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 3);
          if (s0.toLowerCase() === peg$c92) {
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e119);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 4);
            if (s0.toLowerCase() === peg$c93) {
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e120);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 2);
              if (s0.toLowerCase() === peg$c94) {
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e121);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 4);
                if (s0.toLowerCase() === peg$c95) {
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e122);
                  }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 4);
                  if (s0.toLowerCase() === peg$c96) {
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e123);
                    }
                  }
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseIs() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = input.substr(peg$currPos, 2);
          if (s2.toLowerCase() === peg$c90) {
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e113);
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = input.substr(peg$currPos, 7);
            if (s2.toLowerCase() === peg$c89) {
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e124);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                s4 = input.substr(peg$currPos, 3);
                if (s4.toLowerCase() === peg$c97) {
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e125);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              s2 = input.substr(peg$currPos, 4);
              if (s2.toLowerCase() === peg$c98) {
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e126);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                s2 = input.substr(peg$currPos, 5);
                if (s2.toLowerCase() === peg$c99) {
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e127);
                  }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                  s2 = input.substr(peg$currPos, 3);
                  if (s2.toLowerCase() === peg$c100) {
                    peg$currPos += 3;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e128);
                    }
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }

        return s0;
      }

      function peg$parseParamSeparator() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s2 = peg$c101;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e129);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c102) {
            s2 = peg$c102;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e130);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c25) {
                s2 = peg$c25;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e131);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s1 = peg$c7;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e9);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }

        return s0;
      }

      function peg$parse__() {
        var s0, s1;

        peg$silentFails++;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r7.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e133);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = input.charAt(peg$currPos);
          if (peg$r7.test(s1)) {
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e133);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e132);
        }

        return s0;
      }

      function peg$parse_() {
        var s0, s1;

        peg$silentFails++;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r7.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e133);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = input.charAt(peg$currPos);
            if (peg$r7.test(s1)) {
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e133);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e134);
          }
        }

        return s0;
      }

      function peg$parseEOF() {
        var s0, s1;

        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e135);
          }
        }
        peg$silentFails--;
        if (s1 === peg$FAILED) {
          s0 = undefined;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        return s0;
      }

      let lastVarParsed = null;
      peg$result = peg$startRuleFunction();

      if (options.peg$library) {
        return /** @type {any} */ ({
          peg$result,
          peg$currPos,
          peg$FAILED,
          peg$maxFailExpected,
          peg$maxFailPos,
        });
      }
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
      }
    }

    return {
      StartRules: ["start"],
      SyntaxError: peg$SyntaxError,
      parse: peg$parse,
    };
  })();
